READ ME - Elias Brierley - 17069125 - MMU

A machine learning program using LSTM that generates music based upon heart rate and weather
_____________________________________________________________________________________________________________

Install Musescore from https://musescore.org/en/download/musescore.msi 
	*the file path for musescore will automatically be set to the executable file in your local program files area. 
	 if musecore is saved into program x86, replace line 12 of predictpy with the following code:
		
		environment.set('musescoreDirectPNGPath', 'C:\\Program Files (x86)\\MuseScore 3\\bin\\MuseScore3.exe')

Using python 3.8 in the Spyder conda environment

INSTALL FOLLOWING PACKAGES WITH PIP OR CONDA: 

pip install tensorflow
pip install keras
pip install music21
pip install h5py==2.10.0
pip install numpy==1.19.5
pip install matplotlib
_____________________________________________________________________________________________________________

if the following error occurs, it is because you have a numpy package version that is above 1.19.5:

	'NotImplementedError: Cannot convert a symbolic Tensor (lstm_1/strided_slice:0) to a numpy array.'

If using conda, install above packages using "conda install 'packageName'"

_____________________________________________________________________________________________________________

To train the algorithm run the lstm.py file in console or if using conda, simply press run when on the file window.

Training will use the midi files in the midi_songs folder. For the best outcome, midi files should only contain one instrument type per file.

to generate a midi output, run the predict.py file in console or if using conda, simply press run when on the file window.

predict.py can be ran without training with the lstm file as a HDF5 file is provided.
The HDF5 file was generated by running 200 training epochs with the midi files stored in the midi folder.

The output of the code is saved into the project folder as a midi file, with 'test_output' being the basic song and files starting with 
'tempo_change' being the adjusted variants. If using conda, the score of the midi generated will be output in the plots tab above the 
console.

Examples of compositions output by the code can be found in the generated example songs file. Furthermore, some scores can be found for the compositions generated.